// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Options 1: should compile 1`] = `
"# typedoc-plugin-inline-sources

## Enumerations

### SomeEnum

Enum

#### Source

\`\`\`ts
export enum SomeEnum {
  /**
   * Comments for prop
   */
  Item1 = 'item1',
}
\`\`\`

#### Enumeration Members

##### Item1

> **Item1**: \`"item1"\`

Comments for prop

## Classes

### SomeClass

Class

#### Source

\`\`\`ts
export class SomeClass {
  /**
   * Some prop comments
   */
  someProp: string;

  // Class method source
  someMethod() {
    return 'hello';
  }
}
\`\`\`

#### Constructors

##### Constructor

> **new SomeClass**(): [\`SomeClass\`](#someclass)

###### Returns

[\`SomeClass\`](#someclass)

#### Properties

##### someProp

> **someProp**: \`string\`

Some prop comments

#### Methods

##### someMethod()

> **someMethod**(): \`string\`

###### Returns

\`string\`

***

### SomeClassMethodWithMemberSources

#### Constructors

##### Constructor

> **new SomeClassMethodWithMemberSources**(): [\`SomeClassMethodWithMemberSources\`](#someclassmethodwithmembersources)

###### Returns

[\`SomeClassMethodWithMemberSources\`](#someclassmethodwithmembersources)

#### Properties

##### someProp

> **someProp**: \`string\`

Some prop comments

###### Source

\`\`\`ts
  someProp: string;
\`\`\`

#### Methods

##### someMethod()

> **someMethod**(): \`string\`

###### Returns

\`string\`

###### Source

\`\`\`ts
  someMethod() {
    return 'hello';
  }
\`\`\`

## Interfaces

### SomeInterface

Interface

#### Source

\`\`\`ts
export interface SomeInterface {
  /**
   * Comments for prop1
   */
  prop1: string;

  // Comments for prop2
  prop2: number;
}
\`\`\`

#### Properties

##### prop1

> **prop1**: \`string\`

Comments for prop1

##### prop2

> **prop2**: \`number\`

## Type Aliases

### SomeType

> **SomeType** = \`number\`

Type alias

#### Source

\`\`\`ts
export type SomeType = number;
\`\`\`

## Variables

### multipleVariable1

> \`const\` **multipleVariable1**: \`"hello-1"\` = \`'hello-1'\`

Variable list

#### Source

\`\`\`ts
export const multipleVariable1 = 'hello-1',
  multipleVariable2 = 'hello-2';
\`\`\`

***

### multipleVariable2

> \`const\` **multipleVariable2**: \`"hello-2"\` = \`'hello-2'\`

Variable list

#### Source

\`\`\`ts
export const multipleVariable1 = 'hello-1',
  multipleVariable2 = 'hello-2';
\`\`\`

***

### someLet

> **someLet**: \`string\` = \`'hello'\`

#### Source

\`\`\`ts
export let someLet = 'hello';
\`\`\`

***

### someVariable

> \`const\` **someVariable**: \`"hello"\` = \`'hello'\`

Variable

#### Source

Some source comments

Some more source comments

\`\`\`ts
export const someVariable = /*ok*/ 'hello'; // someVariable comment;
\`\`\`

## Functions

### combineFunction()

Combine function main

#### Source

\`\`\`ts
export function combineFunction(
  a: string | number,
  b: string | number,
): string | number {
  if (typeof a === 'string' && typeof b === 'string') {
    return a + b; // Concatenate strings
  } else if (typeof a === 'number' && typeof b === 'number') {
    return a + b; // Sum numbers
  }
  throw new Error(
    'Invalid arguments. Both arguments must be of the same type.',
  );
}
\`\`\`

#### Call Signature

> **combineFunction**(\`a\`, \`b\`): \`string\`

Combine function overload 1

##### Parameters

###### a

\`string\`

###### b

\`string\`

##### Returns

\`string\`

##### Source

\`\`\`ts
export function combineFunction(
  a: string | number,
  b: string | number,
): string | number {
  if (typeof a === 'string' && typeof b === 'string') {
    return a + b; // Concatenate strings
  } else if (typeof a === 'number' && typeof b === 'number') {
    return a + b; // Sum numbers
  }
  throw new Error(
    'Invalid arguments. Both arguments must be of the same type.',
  );
}
\`\`\`

##### Source

\`\`\`ts
export function combineFunction(a: string, b: string): string;
\`\`\`

#### Call Signature

> **combineFunction**(\`a\`, \`b\`): \`number\`

Combine function overload 2

##### Parameters

###### a

\`number\`

###### b

\`number\`

##### Returns

\`number\`

##### Source

\`\`\`ts
export function combineFunction(
  a: string | number,
  b: string | number,
): string | number {
  if (typeof a === 'string' && typeof b === 'string') {
    return a + b; // Concatenate strings
  } else if (typeof a === 'number' && typeof b === 'number') {
    return a + b; // Sum numbers
  }
  throw new Error(
    'Invalid arguments. Both arguments must be of the same type.',
  );
}
\`\`\`

##### Source

\`\`\`ts
export function combineFunction(a: number, b: number): number;
\`\`\`

***

### greet()

> **greet**(): \`void\`

Logs a greeting message to the console.

#### Returns

\`void\`

#### Source

Optional source comments

\`\`\`ts
export function greet(): void {
  console.log('Hello, welcome to TypeScript!');
}
\`\`\`

***

### someConstFunction()

> **someConstFunction**(\`x\`): \`string\`

Const function

#### Parameters

##### x

\`string\`

#### Returns

\`string\`

#### Source

\`\`\`ts
export const someConstFunction = (x: string) => x;
\`\`\`

***

### someFunction()

> **someFunction**(\`x\`, \`y\`): \`number\`

Function

#### Parameters

##### x

\`number\`

##### y

\`number\`

#### Returns

\`number\`

#### Source

\`\`\`ts
export function someFunction(x: number, y: number) {
  return x + y;
}
\`\`\`
"
`;
